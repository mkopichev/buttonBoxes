
f103_buttonBoxes.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004e8  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000618  08000620  00010620  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000618  08000618  00010620  2**0
                  CONTENTS
  4 .ARM          00000000  08000618  08000618  00010620  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000618  08000620  00010620  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000618  08000618  00010618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800061c  0800061c  0001061c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010620  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000620  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000620  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010620  2**0
                  CONTENTS, READONLY
 12 .debug_info   000007d7  00000000  00000000  00010649  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000001c6  00000000  00000000  00010e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000078  00000000  00000000  00010fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000060  00000000  00000000  00011060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fc6c  00000000  00000000  000110c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000069a  00000000  00000000  00020d2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00052f4b  00000000  00000000  000213c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00074311  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000012c  00000000  00000000  00074364  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000600 	.word	0x08000600

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000600 	.word	0x08000600

08000170 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800017a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800017e:	2b00      	cmp	r3, #0
 8000180:	db0b      	blt.n	800019a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000182:	79fb      	ldrb	r3, [r7, #7]
 8000184:	f003 021f 	and.w	r2, r3, #31
 8000188:	4906      	ldr	r1, [pc, #24]	; (80001a4 <__NVIC_EnableIRQ+0x34>)
 800018a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800018e:	095b      	lsrs	r3, r3, #5
 8000190:	2001      	movs	r0, #1
 8000192:	fa00 f202 	lsl.w	r2, r0, r2
 8000196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800019a:	bf00      	nop
 800019c:	370c      	adds	r7, #12
 800019e:	46bd      	mov	sp, r7
 80001a0:	bc80      	pop	{r7}
 80001a2:	4770      	bx	lr
 80001a4:	e000e100 	.word	0xe000e100

080001a8 <main>:
static uint16_t systickCounter = 0; // for systick timer
static uint8_t whichButtonPressed = 0; // for understanding which button was pressed

void delayMs(uint16_t millisec);

int main(void) {
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b082      	sub	sp, #8
 80001ac:	af00      	add	r7, sp, #0

	RCC->CR = (1 << RCC_CR_HSEON_Pos);
 80001ae:	4b67      	ldr	r3, [pc, #412]	; (800034c <main+0x1a4>)
 80001b0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80001b4:	601a      	str	r2, [r3, #0]
	while (!(RCC->CR & (1 << RCC_CR_HSERDY_Pos))) {
 80001b6:	e000      	b.n	80001ba <main+0x12>

		__NOP();
 80001b8:	bf00      	nop
	while (!(RCC->CR & (1 << RCC_CR_HSERDY_Pos))) {
 80001ba:	4b64      	ldr	r3, [pc, #400]	; (800034c <main+0x1a4>)
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d0f8      	beq.n	80001b8 <main+0x10>
	}
	RCC->CFGR |= (1 << RCC_CFGR_SW_Pos);
 80001c6:	4b61      	ldr	r3, [pc, #388]	; (800034c <main+0x1a4>)
 80001c8:	685b      	ldr	r3, [r3, #4]
 80001ca:	4a60      	ldr	r2, [pc, #384]	; (800034c <main+0x1a4>)
 80001cc:	f043 0301 	orr.w	r3, r3, #1
 80001d0:	6053      	str	r3, [r2, #4]

	SysTick->LOAD = 8000;
 80001d2:	4b5f      	ldr	r3, [pc, #380]	; (8000350 <main+0x1a8>)
 80001d4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80001d8:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos)
 80001da:	4b5d      	ldr	r3, [pc, #372]	; (8000350 <main+0x1a8>)
 80001dc:	2207      	movs	r2, #7
 80001de:	601a      	str	r2, [r3, #0]
			| (1 << SysTick_CTRL_CLKSOURCE_Pos)
			| (1 << SysTick_CTRL_TICKINT_Pos);

	RCC->APB2ENR |= (1 << RCC_APB2ENR_IOPCEN_Pos)
 80001e0:	4b5a      	ldr	r3, [pc, #360]	; (800034c <main+0x1a4>)
 80001e2:	699b      	ldr	r3, [r3, #24]
 80001e4:	4a59      	ldr	r2, [pc, #356]	; (800034c <main+0x1a4>)
 80001e6:	f043 0319 	orr.w	r3, r3, #25
 80001ea:	6193      	str	r3, [r2, #24]
			| (1 << RCC_APB2ENR_IOPBEN_Pos) | (1 << RCC_APB2ENR_AFIOEN_Pos);
	RCC->APB1ENR |= (1 << RCC_APB1ENR_TIM2EN_Pos)
 80001ec:	4b57      	ldr	r3, [pc, #348]	; (800034c <main+0x1a4>)
 80001ee:	69db      	ldr	r3, [r3, #28]
 80001f0:	4a56      	ldr	r2, [pc, #344]	; (800034c <main+0x1a4>)
 80001f2:	f043 0303 	orr.w	r3, r3, #3
 80001f6:	61d3      	str	r3, [r2, #28]
			| (1 << RCC_APB1ENR_TIM3EN_Pos);

	// PC13 is a service LED
	GPIOC->CRH |= (2 << GPIO_CRH_MODE13_Pos); // PC13 output, open-drain, speed 2 MHz max
 80001f8:	4b56      	ldr	r3, [pc, #344]	; (8000354 <main+0x1ac>)
 80001fa:	685b      	ldr	r3, [r3, #4]
 80001fc:	4a55      	ldr	r2, [pc, #340]	; (8000354 <main+0x1ac>)
 80001fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000202:	6053      	str	r3, [r2, #4]

	// button are on PORTB 7, 6, 5 pins
	GPIOB->CRL &= ~((1 << GPIO_CRL_CNF7_Pos) | (1 << GPIO_CRL_CNF6_Pos)
 8000204:	4b54      	ldr	r3, [pc, #336]	; (8000358 <main+0x1b0>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a53      	ldr	r2, [pc, #332]	; (8000358 <main+0x1b0>)
 800020a:	f023 4388 	bic.w	r3, r3, #1140850688	; 0x44000000
 800020e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000212:	6013      	str	r3, [r2, #0]
			| (1 << GPIO_CRL_CNF5_Pos)); // clear button pins
	GPIOB->CRL |= (2 << GPIO_CRL_CNF7_Pos) | (2 << GPIO_CRL_CNF6_Pos)
 8000214:	4b50      	ldr	r3, [pc, #320]	; (8000358 <main+0x1b0>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a4f      	ldr	r2, [pc, #316]	; (8000358 <main+0x1b0>)
 800021a:	f043 4308 	orr.w	r3, r3, #2281701376	; 0x88000000
 800021e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000222:	6013      	str	r3, [r2, #0]
			| (2 << GPIO_CRL_CNF5_Pos); // set button pins as inputs
	GPIOB->ODR |= (1 << GPIO_ODR_ODR7_Pos) | (1 << GPIO_ODR_ODR6_Pos)
 8000224:	4b4c      	ldr	r3, [pc, #304]	; (8000358 <main+0x1b0>)
 8000226:	68db      	ldr	r3, [r3, #12]
 8000228:	4a4b      	ldr	r2, [pc, #300]	; (8000358 <main+0x1b0>)
 800022a:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800022e:	60d3      	str	r3, [r2, #12]
			| (1 << GPIO_ODR_ODR5_Pos); // set inputs with pull-up resistors
	EXTI->IMR |= (1 << EXTI_IMR_MR7_Pos) | (1 << EXTI_IMR_MR6_Pos)
 8000230:	4b4a      	ldr	r3, [pc, #296]	; (800035c <main+0x1b4>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	4a49      	ldr	r2, [pc, #292]	; (800035c <main+0x1b4>)
 8000236:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800023a:	6013      	str	r3, [r2, #0]
			| (1 << EXTI_IMR_MR5_Pos); // interrupts on
	EXTI->FTSR |= (1 << EXTI_FTSR_TR7_Pos) | (1 << EXTI_FTSR_TR6_Pos)
 800023c:	4b47      	ldr	r3, [pc, #284]	; (800035c <main+0x1b4>)
 800023e:	68db      	ldr	r3, [r3, #12]
 8000240:	4a46      	ldr	r2, [pc, #280]	; (800035c <main+0x1b4>)
 8000242:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8000246:	60d3      	str	r3, [r2, #12]
			| (1 << EXTI_FTSR_TR5_Pos);
	AFIO->EXTICR[1] |= (1 << AFIO_EXTICR2_EXTI7_Pos)
 8000248:	4b45      	ldr	r3, [pc, #276]	; (8000360 <main+0x1b8>)
 800024a:	68db      	ldr	r3, [r3, #12]
 800024c:	4a44      	ldr	r2, [pc, #272]	; (8000360 <main+0x1b8>)
 800024e:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8000252:	f043 0310 	orr.w	r3, r3, #16
 8000256:	60d3      	str	r3, [r2, #12]
			| (1 << AFIO_EXTICR2_EXTI6_Pos) | (1 << AFIO_EXTICR2_EXTI5_Pos); // PORTB 7, 6, 5 interrupt enable
	NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000258:	2017      	movs	r0, #23
 800025a:	f7ff ff89 	bl	8000170 <__NVIC_EnableIRQ>

	// button LEDs are on PORTB 15, 14, 13
	GPIOB->CRH |= (2 << GPIO_CRH_MODE15_Pos) | (2 << GPIO_CRH_MODE14_Pos)
 800025e:	4b3e      	ldr	r3, [pc, #248]	; (8000358 <main+0x1b0>)
 8000260:	685b      	ldr	r3, [r3, #4]
 8000262:	4a3d      	ldr	r2, [pc, #244]	; (8000358 <main+0x1b0>)
 8000264:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8000268:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800026c:	6053      	str	r3, [r2, #4]
			| (2 << GPIO_CRH_MODE13_Pos);
	GPIOB->CRH &= ~((1 << GPIO_CRH_CNF15_Pos) | (1 << GPIO_CRH_CNF14_Pos)
 800026e:	4b3a      	ldr	r3, [pc, #232]	; (8000358 <main+0x1b0>)
 8000270:	685b      	ldr	r3, [r3, #4]
 8000272:	4a39      	ldr	r2, [pc, #228]	; (8000358 <main+0x1b0>)
 8000274:	f023 4388 	bic.w	r3, r3, #1140850688	; 0x44000000
 8000278:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800027c:	6053      	str	r3, [r2, #4]
			| (1 << GPIO_CRH_CNF13_Pos)); // push-pull

	// TIM2 is for buttons debouncing
	TIM2->CR1 |= (1 << TIM_CR1_URS_Pos);
 800027e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000288:	f043 0304 	orr.w	r3, r3, #4
 800028c:	6013      	str	r3, [r2, #0]
	TIM2->DIER |= (1 << TIM_DIER_UIE_Pos);
 800028e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000292:	68db      	ldr	r3, [r3, #12]
 8000294:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000298:	f043 0301 	orr.w	r3, r3, #1
 800029c:	60d3      	str	r3, [r2, #12]
	TIM2->PSC = 8000; // timer frequency is 1 kHz
 800029e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002a2:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80002a6:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 20; // timer period is ARR ms
 80002a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002ac:	2214      	movs	r2, #20
 80002ae:	62da      	str	r2, [r3, #44]	; 0x2c
	NVIC_EnableIRQ(TIM2_IRQn);
 80002b0:	201c      	movs	r0, #28
 80002b2:	f7ff ff5d 	bl	8000170 <__NVIC_EnableIRQ>

	// TIM3 is for time delay between buttons pushes
	TIM3->CR1 |= (1 << TIM_CR1_URS_Pos);
 80002b6:	4b2b      	ldr	r3, [pc, #172]	; (8000364 <main+0x1bc>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	4a2a      	ldr	r2, [pc, #168]	; (8000364 <main+0x1bc>)
 80002bc:	f043 0304 	orr.w	r3, r3, #4
 80002c0:	6013      	str	r3, [r2, #0]
	TIM3->DIER |= (1 << TIM_DIER_UIE_Pos);
 80002c2:	4b28      	ldr	r3, [pc, #160]	; (8000364 <main+0x1bc>)
 80002c4:	68db      	ldr	r3, [r3, #12]
 80002c6:	4a27      	ldr	r2, [pc, #156]	; (8000364 <main+0x1bc>)
 80002c8:	f043 0301 	orr.w	r3, r3, #1
 80002cc:	60d3      	str	r3, [r2, #12]
	TIM3->PSC = 8000; // timer frequency is 1 kHz
 80002ce:	4b25      	ldr	r3, [pc, #148]	; (8000364 <main+0x1bc>)
 80002d0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80002d4:	629a      	str	r2, [r3, #40]	; 0x28
	TIM3->ARR = 2000; // timer period is ARR ms
 80002d6:	4b23      	ldr	r3, [pc, #140]	; (8000364 <main+0x1bc>)
 80002d8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80002dc:	62da      	str	r2, [r3, #44]	; 0x2c
	NVIC_EnableIRQ(TIM3_IRQn);
 80002de:	201d      	movs	r0, #29
 80002e0:	f7ff ff46 	bl	8000170 <__NVIC_EnableIRQ>

	for (uint8_t i = 0; i < 3; i++) {
 80002e4:	2300      	movs	r3, #0
 80002e6:	71fb      	strb	r3, [r7, #7]
 80002e8:	e025      	b.n	8000336 <main+0x18e>

		switch (i) {
 80002ea:	79fb      	ldrb	r3, [r7, #7]
 80002ec:	2b02      	cmp	r3, #2
 80002ee:	d014      	beq.n	800031a <main+0x172>
 80002f0:	2b02      	cmp	r3, #2
 80002f2:	dc19      	bgt.n	8000328 <main+0x180>
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d002      	beq.n	80002fe <main+0x156>
 80002f8:	2b01      	cmp	r3, #1
 80002fa:	d007      	beq.n	800030c <main+0x164>
 80002fc:	e014      	b.n	8000328 <main+0x180>

		case 0:
			GPIOB->BSRR |= (1 << GPIO_BSRR_BS13_Pos);
 80002fe:	4b16      	ldr	r3, [pc, #88]	; (8000358 <main+0x1b0>)
 8000300:	691b      	ldr	r3, [r3, #16]
 8000302:	4a15      	ldr	r2, [pc, #84]	; (8000358 <main+0x1b0>)
 8000304:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000308:	6113      	str	r3, [r2, #16]
			break;
 800030a:	e00d      	b.n	8000328 <main+0x180>
		case 1:
			GPIOB->BSRR |= (1 << GPIO_BSRR_BS14_Pos);
 800030c:	4b12      	ldr	r3, [pc, #72]	; (8000358 <main+0x1b0>)
 800030e:	691b      	ldr	r3, [r3, #16]
 8000310:	4a11      	ldr	r2, [pc, #68]	; (8000358 <main+0x1b0>)
 8000312:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000316:	6113      	str	r3, [r2, #16]
			break;
 8000318:	e006      	b.n	8000328 <main+0x180>
		case 2:
			GPIOB->BSRR |= (1 << GPIO_BSRR_BS15_Pos);
 800031a:	4b0f      	ldr	r3, [pc, #60]	; (8000358 <main+0x1b0>)
 800031c:	691b      	ldr	r3, [r3, #16]
 800031e:	4a0e      	ldr	r2, [pc, #56]	; (8000358 <main+0x1b0>)
 8000320:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000324:	6113      	str	r3, [r2, #16]
			break;
 8000326:	bf00      	nop
		}
		delayMs(500);
 8000328:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800032c:	f000 f8e6 	bl	80004fc <delayMs>
	for (uint8_t i = 0; i < 3; i++) {
 8000330:	79fb      	ldrb	r3, [r7, #7]
 8000332:	3301      	adds	r3, #1
 8000334:	71fb      	strb	r3, [r7, #7]
 8000336:	79fb      	ldrb	r3, [r7, #7]
 8000338:	2b02      	cmp	r3, #2
 800033a:	d9d6      	bls.n	80002ea <main+0x142>
	}

	GPIOB->BSRR |= (1 << GPIO_BSRR_BR13_Pos) | (1 << GPIO_BSRR_BR14_Pos)
 800033c:	4b06      	ldr	r3, [pc, #24]	; (8000358 <main+0x1b0>)
 800033e:	691b      	ldr	r3, [r3, #16]
 8000340:	4a05      	ldr	r2, [pc, #20]	; (8000358 <main+0x1b0>)
 8000342:	f043 4360 	orr.w	r3, r3, #3758096384	; 0xe0000000
 8000346:	6113      	str	r3, [r2, #16]
			| (1 << GPIO_BSRR_BR15_Pos);

	for (;;) {

		__NOP();
 8000348:	bf00      	nop
 800034a:	e7fd      	b.n	8000348 <main+0x1a0>
 800034c:	40021000 	.word	0x40021000
 8000350:	e000e010 	.word	0xe000e010
 8000354:	40011000 	.word	0x40011000
 8000358:	40010c00 	.word	0x40010c00
 800035c:	40010400 	.word	0x40010400
 8000360:	40010000 	.word	0x40010000
 8000364:	40000400 	.word	0x40000400

08000368 <EXTI9_5_IRQHandler>:
	}
}

void EXTI9_5_IRQHandler(void) {
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0

	EXTI->IMR &= ~((1 << EXTI_IMR_MR7_Pos) | (1 << EXTI_IMR_MR6_Pos)
 800036c:	4b1b      	ldr	r3, [pc, #108]	; (80003dc <EXTI9_5_IRQHandler+0x74>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	4a1a      	ldr	r2, [pc, #104]	; (80003dc <EXTI9_5_IRQHandler+0x74>)
 8000372:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8000376:	6013      	str	r3, [r2, #0]
			| (1 << EXTI_IMR_MR5_Pos)); // disable all buttons interrupts
	if (EXTI->PR & (1 << EXTI_PR_PR7_Pos)) { // find button that is pressed
 8000378:	4b18      	ldr	r3, [pc, #96]	; (80003dc <EXTI9_5_IRQHandler+0x74>)
 800037a:	695b      	ldr	r3, [r3, #20]
 800037c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000380:	2b00      	cmp	r3, #0
 8000382:	d006      	beq.n	8000392 <EXTI9_5_IRQHandler+0x2a>

		EXTI->PR = (1 << EXTI_PR_PR7_Pos); // clear external interrupt pending
 8000384:	4b15      	ldr	r3, [pc, #84]	; (80003dc <EXTI9_5_IRQHandler+0x74>)
 8000386:	2280      	movs	r2, #128	; 0x80
 8000388:	615a      	str	r2, [r3, #20]
		whichButtonPressed = 1;
 800038a:	4b15      	ldr	r3, [pc, #84]	; (80003e0 <EXTI9_5_IRQHandler+0x78>)
 800038c:	2201      	movs	r2, #1
 800038e:	701a      	strb	r2, [r3, #0]
 8000390:	e018      	b.n	80003c4 <EXTI9_5_IRQHandler+0x5c>
	} else if (EXTI->PR & (1 << EXTI_PR_PR6_Pos)) {
 8000392:	4b12      	ldr	r3, [pc, #72]	; (80003dc <EXTI9_5_IRQHandler+0x74>)
 8000394:	695b      	ldr	r3, [r3, #20]
 8000396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800039a:	2b00      	cmp	r3, #0
 800039c:	d006      	beq.n	80003ac <EXTI9_5_IRQHandler+0x44>

		EXTI->PR = (1 << EXTI_PR_PR6_Pos);
 800039e:	4b0f      	ldr	r3, [pc, #60]	; (80003dc <EXTI9_5_IRQHandler+0x74>)
 80003a0:	2240      	movs	r2, #64	; 0x40
 80003a2:	615a      	str	r2, [r3, #20]
		whichButtonPressed = 2;
 80003a4:	4b0e      	ldr	r3, [pc, #56]	; (80003e0 <EXTI9_5_IRQHandler+0x78>)
 80003a6:	2202      	movs	r2, #2
 80003a8:	701a      	strb	r2, [r3, #0]
 80003aa:	e00b      	b.n	80003c4 <EXTI9_5_IRQHandler+0x5c>
	} else if (EXTI->PR & (1 << EXTI_PR_PR5_Pos)) {
 80003ac:	4b0b      	ldr	r3, [pc, #44]	; (80003dc <EXTI9_5_IRQHandler+0x74>)
 80003ae:	695b      	ldr	r3, [r3, #20]
 80003b0:	f003 0320 	and.w	r3, r3, #32
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d005      	beq.n	80003c4 <EXTI9_5_IRQHandler+0x5c>

		EXTI->PR = (1 << EXTI_PR_PR5_Pos);
 80003b8:	4b08      	ldr	r3, [pc, #32]	; (80003dc <EXTI9_5_IRQHandler+0x74>)
 80003ba:	2220      	movs	r2, #32
 80003bc:	615a      	str	r2, [r3, #20]
		whichButtonPressed = 3;
 80003be:	4b08      	ldr	r3, [pc, #32]	; (80003e0 <EXTI9_5_IRQHandler+0x78>)
 80003c0:	2203      	movs	r2, #3
 80003c2:	701a      	strb	r2, [r3, #0]
	}
	TIM2->CR1 |= (1 << TIM_CR1_CEN_Pos); // start TIMER2 for debouncing
 80003c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003ce:	f043 0301 	orr.w	r3, r3, #1
 80003d2:	6013      	str	r3, [r2, #0]
}
 80003d4:	bf00      	nop
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bc80      	pop	{r7}
 80003da:	4770      	bx	lr
 80003dc:	40010400 	.word	0x40010400
 80003e0:	2000001e 	.word	0x2000001e

080003e4 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) {
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0

	TIM2->CR1 &= ~(1 << TIM_CR1_CEN_Pos); // stop TIMER2
 80003e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003f2:	f023 0301 	bic.w	r3, r3, #1
 80003f6:	6013      	str	r3, [r2, #0]
	if (TIM2->SR & (1 << TIM_SR_UIF_Pos)) { // timer overflow occured
 80003f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003fc:	691b      	ldr	r3, [r3, #16]
 80003fe:	f003 0301 	and.w	r3, r3, #1
 8000402:	2b00      	cmp	r3, #0
 8000404:	d03f      	beq.n	8000486 <TIM2_IRQHandler+0xa2>

		TIM2->SR &= ~(1 << TIM_SR_UIF_Pos); // clear timer overflow interrupt flag
 8000406:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800040a:	691b      	ldr	r3, [r3, #16]
 800040c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000410:	f023 0301 	bic.w	r3, r3, #1
 8000414:	6113      	str	r3, [r2, #16]
		if ((whichButtonPressed == 1)
 8000416:	4b1e      	ldr	r3, [pc, #120]	; (8000490 <TIM2_IRQHandler+0xac>)
 8000418:	781b      	ldrb	r3, [r3, #0]
 800041a:	2b01      	cmp	r3, #1
 800041c:	d10c      	bne.n	8000438 <TIM2_IRQHandler+0x54>
				&& (!(GPIOB->IDR & (1 << GPIO_IDR_IDR7_Pos)))) { // if button is still pressed after bouncing time
 800041e:	4b1d      	ldr	r3, [pc, #116]	; (8000494 <TIM2_IRQHandler+0xb0>)
 8000420:	689b      	ldr	r3, [r3, #8]
 8000422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000426:	2b00      	cmp	r3, #0
 8000428:	d106      	bne.n	8000438 <TIM2_IRQHandler+0x54>

			GPIOB->ODR |= (1 << GPIO_ODR_ODR15_Pos); // light up one of the LEDs
 800042a:	4b1a      	ldr	r3, [pc, #104]	; (8000494 <TIM2_IRQHandler+0xb0>)
 800042c:	68db      	ldr	r3, [r3, #12]
 800042e:	4a19      	ldr	r2, [pc, #100]	; (8000494 <TIM2_IRQHandler+0xb0>)
 8000430:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000434:	60d3      	str	r3, [r2, #12]
 8000436:	e020      	b.n	800047a <TIM2_IRQHandler+0x96>
		} else if ((whichButtonPressed == 2)
 8000438:	4b15      	ldr	r3, [pc, #84]	; (8000490 <TIM2_IRQHandler+0xac>)
 800043a:	781b      	ldrb	r3, [r3, #0]
 800043c:	2b02      	cmp	r3, #2
 800043e:	d10c      	bne.n	800045a <TIM2_IRQHandler+0x76>
				&& (!(GPIOB->IDR & (1 << GPIO_IDR_IDR6_Pos)))) {
 8000440:	4b14      	ldr	r3, [pc, #80]	; (8000494 <TIM2_IRQHandler+0xb0>)
 8000442:	689b      	ldr	r3, [r3, #8]
 8000444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000448:	2b00      	cmp	r3, #0
 800044a:	d106      	bne.n	800045a <TIM2_IRQHandler+0x76>

			GPIOB->ODR |= (1 << GPIO_ODR_ODR14_Pos);
 800044c:	4b11      	ldr	r3, [pc, #68]	; (8000494 <TIM2_IRQHandler+0xb0>)
 800044e:	68db      	ldr	r3, [r3, #12]
 8000450:	4a10      	ldr	r2, [pc, #64]	; (8000494 <TIM2_IRQHandler+0xb0>)
 8000452:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000456:	60d3      	str	r3, [r2, #12]
 8000458:	e00f      	b.n	800047a <TIM2_IRQHandler+0x96>
		} else if ((whichButtonPressed == 3)
 800045a:	4b0d      	ldr	r3, [pc, #52]	; (8000490 <TIM2_IRQHandler+0xac>)
 800045c:	781b      	ldrb	r3, [r3, #0]
 800045e:	2b03      	cmp	r3, #3
 8000460:	d10b      	bne.n	800047a <TIM2_IRQHandler+0x96>
				&& (!(GPIOB->IDR & (1 << GPIO_IDR_IDR5_Pos)))) {
 8000462:	4b0c      	ldr	r3, [pc, #48]	; (8000494 <TIM2_IRQHandler+0xb0>)
 8000464:	689b      	ldr	r3, [r3, #8]
 8000466:	f003 0320 	and.w	r3, r3, #32
 800046a:	2b00      	cmp	r3, #0
 800046c:	d105      	bne.n	800047a <TIM2_IRQHandler+0x96>

			GPIOB->ODR |= (1 << GPIO_ODR_ODR13_Pos);
 800046e:	4b09      	ldr	r3, [pc, #36]	; (8000494 <TIM2_IRQHandler+0xb0>)
 8000470:	68db      	ldr	r3, [r3, #12]
 8000472:	4a08      	ldr	r2, [pc, #32]	; (8000494 <TIM2_IRQHandler+0xb0>)
 8000474:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000478:	60d3      	str	r3, [r2, #12]
		}
		TIM3->CR1 |= (1 << TIM_CR1_CEN_Pos); // start TIMER3
 800047a:	4b07      	ldr	r3, [pc, #28]	; (8000498 <TIM2_IRQHandler+0xb4>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	4a06      	ldr	r2, [pc, #24]	; (8000498 <TIM2_IRQHandler+0xb4>)
 8000480:	f043 0301 	orr.w	r3, r3, #1
 8000484:	6013      	str	r3, [r2, #0]
	}
}
 8000486:	bf00      	nop
 8000488:	46bd      	mov	sp, r7
 800048a:	bc80      	pop	{r7}
 800048c:	4770      	bx	lr
 800048e:	bf00      	nop
 8000490:	2000001e 	.word	0x2000001e
 8000494:	40010c00 	.word	0x40010c00
 8000498:	40000400 	.word	0x40000400

0800049c <TIM3_IRQHandler>:

void TIM3_IRQHandler(void) {
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0

	TIM3->CR1 &= ~(1 << TIM_CR1_CEN_Pos); // stop TIMER3
 80004a0:	4b12      	ldr	r3, [pc, #72]	; (80004ec <TIM3_IRQHandler+0x50>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a11      	ldr	r2, [pc, #68]	; (80004ec <TIM3_IRQHandler+0x50>)
 80004a6:	f023 0301 	bic.w	r3, r3, #1
 80004aa:	6013      	str	r3, [r2, #0]
	if (TIM3->SR & (1 << TIM_SR_UIF_Pos)) {
 80004ac:	4b0f      	ldr	r3, [pc, #60]	; (80004ec <TIM3_IRQHandler+0x50>)
 80004ae:	691b      	ldr	r3, [r3, #16]
 80004b0:	f003 0301 	and.w	r3, r3, #1
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d014      	beq.n	80004e2 <TIM3_IRQHandler+0x46>

		TIM3->SR &= ~(1 << TIM_SR_UIF_Pos);
 80004b8:	4b0c      	ldr	r3, [pc, #48]	; (80004ec <TIM3_IRQHandler+0x50>)
 80004ba:	691b      	ldr	r3, [r3, #16]
 80004bc:	4a0b      	ldr	r2, [pc, #44]	; (80004ec <TIM3_IRQHandler+0x50>)
 80004be:	f023 0301 	bic.w	r3, r3, #1
 80004c2:	6113      	str	r3, [r2, #16]
		GPIOB->ODR &= ~((1 << GPIO_ODR_ODR15_Pos) | (1 << GPIO_ODR_ODR14_Pos)
 80004c4:	4b0a      	ldr	r3, [pc, #40]	; (80004f0 <TIM3_IRQHandler+0x54>)
 80004c6:	68db      	ldr	r3, [r3, #12]
 80004c8:	4a09      	ldr	r2, [pc, #36]	; (80004f0 <TIM3_IRQHandler+0x54>)
 80004ca:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80004ce:	60d3      	str	r3, [r2, #12]
				| (1 << GPIO_ODR_ODR13_Pos)); // turn off all LEDs
		EXTI->IMR |= (1 << EXTI_IMR_MR7_Pos) | (1 << EXTI_IMR_MR6_Pos)
 80004d0:	4b08      	ldr	r3, [pc, #32]	; (80004f4 <TIM3_IRQHandler+0x58>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4a07      	ldr	r2, [pc, #28]	; (80004f4 <TIM3_IRQHandler+0x58>)
 80004d6:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80004da:	6013      	str	r3, [r2, #0]
				| (1 << EXTI_IMR_MR5_Pos); // enable all buttons interrupts
		whichButtonPressed = 0;
 80004dc:	4b06      	ldr	r3, [pc, #24]	; (80004f8 <TIM3_IRQHandler+0x5c>)
 80004de:	2200      	movs	r2, #0
 80004e0:	701a      	strb	r2, [r3, #0]
	}
}
 80004e2:	bf00      	nop
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bc80      	pop	{r7}
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	40000400 	.word	0x40000400
 80004f0:	40010c00 	.word	0x40010c00
 80004f4:	40010400 	.word	0x40010400
 80004f8:	2000001e 	.word	0x2000001e

080004fc <delayMs>:

void delayMs(uint16_t millisec) {
 80004fc:	b480      	push	{r7}
 80004fe:	b083      	sub	sp, #12
 8000500:	af00      	add	r7, sp, #0
 8000502:	4603      	mov	r3, r0
 8000504:	80fb      	strh	r3, [r7, #6]

	systickCounter = 0;
 8000506:	4b08      	ldr	r3, [pc, #32]	; (8000528 <delayMs+0x2c>)
 8000508:	2200      	movs	r2, #0
 800050a:	801a      	strh	r2, [r3, #0]

	while (systickCounter < millisec) {
 800050c:	e000      	b.n	8000510 <delayMs+0x14>

		__NOP();
 800050e:	bf00      	nop
	while (systickCounter < millisec) {
 8000510:	4b05      	ldr	r3, [pc, #20]	; (8000528 <delayMs+0x2c>)
 8000512:	881b      	ldrh	r3, [r3, #0]
 8000514:	88fa      	ldrh	r2, [r7, #6]
 8000516:	429a      	cmp	r2, r3
 8000518:	d8f9      	bhi.n	800050e <delayMs+0x12>
	}
}
 800051a:	bf00      	nop
 800051c:	bf00      	nop
 800051e:	370c      	adds	r7, #12
 8000520:	46bd      	mov	sp, r7
 8000522:	bc80      	pop	{r7}
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	2000001c 	.word	0x2000001c

0800052c <SysTick_Handler>:

void SysTick_Handler(void) {
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0

	if (systickCounter++ > 1000) {
 8000530:	4b0a      	ldr	r3, [pc, #40]	; (800055c <SysTick_Handler+0x30>)
 8000532:	881b      	ldrh	r3, [r3, #0]
 8000534:	1c5a      	adds	r2, r3, #1
 8000536:	b291      	uxth	r1, r2
 8000538:	4a08      	ldr	r2, [pc, #32]	; (800055c <SysTick_Handler+0x30>)
 800053a:	8011      	strh	r1, [r2, #0]
 800053c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000540:	d908      	bls.n	8000554 <SysTick_Handler+0x28>

		systickCounter = 0;
 8000542:	4b06      	ldr	r3, [pc, #24]	; (800055c <SysTick_Handler+0x30>)
 8000544:	2200      	movs	r2, #0
 8000546:	801a      	strh	r2, [r3, #0]
		GPIOC->ODR ^= (1 << GPIO_ODR_ODR13_Pos);
 8000548:	4b05      	ldr	r3, [pc, #20]	; (8000560 <SysTick_Handler+0x34>)
 800054a:	68db      	ldr	r3, [r3, #12]
 800054c:	4a04      	ldr	r2, [pc, #16]	; (8000560 <SysTick_Handler+0x34>)
 800054e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8000552:	60d3      	str	r3, [r2, #12]
	}
}
 8000554:	bf00      	nop
 8000556:	46bd      	mov	sp, r7
 8000558:	bc80      	pop	{r7}
 800055a:	4770      	bx	lr
 800055c:	2000001c 	.word	0x2000001c
 8000560:	40011000 	.word	0x40011000

08000564 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000564:	480d      	ldr	r0, [pc, #52]	; (800059c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000566:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000568:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800056c:	480c      	ldr	r0, [pc, #48]	; (80005a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800056e:	490d      	ldr	r1, [pc, #52]	; (80005a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000570:	4a0d      	ldr	r2, [pc, #52]	; (80005a8 <LoopForever+0xe>)
  movs r3, #0
 8000572:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000574:	e002      	b.n	800057c <LoopCopyDataInit>

08000576 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000576:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000578:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800057a:	3304      	adds	r3, #4

0800057c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800057c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800057e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000580:	d3f9      	bcc.n	8000576 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000582:	4a0a      	ldr	r2, [pc, #40]	; (80005ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000584:	4c0a      	ldr	r4, [pc, #40]	; (80005b0 <LoopForever+0x16>)
  movs r3, #0
 8000586:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000588:	e001      	b.n	800058e <LoopFillZerobss>

0800058a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800058a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800058c:	3204      	adds	r2, #4

0800058e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800058e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000590:	d3fb      	bcc.n	800058a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000592:	f000 f811 	bl	80005b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000596:	f7ff fe07 	bl	80001a8 <main>

0800059a <LoopForever>:

LoopForever:
    b LoopForever
 800059a:	e7fe      	b.n	800059a <LoopForever>
  ldr   r0, =_estack
 800059c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80005a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005a4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80005a8:	08000620 	.word	0x08000620
  ldr r2, =_sbss
 80005ac:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80005b0:	20000020 	.word	0x20000020

080005b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005b4:	e7fe      	b.n	80005b4 <ADC1_2_IRQHandler>
	...

080005b8 <__libc_init_array>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	2600      	movs	r6, #0
 80005bc:	4d0c      	ldr	r5, [pc, #48]	; (80005f0 <__libc_init_array+0x38>)
 80005be:	4c0d      	ldr	r4, [pc, #52]	; (80005f4 <__libc_init_array+0x3c>)
 80005c0:	1b64      	subs	r4, r4, r5
 80005c2:	10a4      	asrs	r4, r4, #2
 80005c4:	42a6      	cmp	r6, r4
 80005c6:	d109      	bne.n	80005dc <__libc_init_array+0x24>
 80005c8:	f000 f81a 	bl	8000600 <_init>
 80005cc:	2600      	movs	r6, #0
 80005ce:	4d0a      	ldr	r5, [pc, #40]	; (80005f8 <__libc_init_array+0x40>)
 80005d0:	4c0a      	ldr	r4, [pc, #40]	; (80005fc <__libc_init_array+0x44>)
 80005d2:	1b64      	subs	r4, r4, r5
 80005d4:	10a4      	asrs	r4, r4, #2
 80005d6:	42a6      	cmp	r6, r4
 80005d8:	d105      	bne.n	80005e6 <__libc_init_array+0x2e>
 80005da:	bd70      	pop	{r4, r5, r6, pc}
 80005dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80005e0:	4798      	blx	r3
 80005e2:	3601      	adds	r6, #1
 80005e4:	e7ee      	b.n	80005c4 <__libc_init_array+0xc>
 80005e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80005ea:	4798      	blx	r3
 80005ec:	3601      	adds	r6, #1
 80005ee:	e7f2      	b.n	80005d6 <__libc_init_array+0x1e>
 80005f0:	08000618 	.word	0x08000618
 80005f4:	08000618 	.word	0x08000618
 80005f8:	08000618 	.word	0x08000618
 80005fc:	0800061c 	.word	0x0800061c

08000600 <_init>:
 8000600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000602:	bf00      	nop
 8000604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000606:	bc08      	pop	{r3}
 8000608:	469e      	mov	lr, r3
 800060a:	4770      	bx	lr

0800060c <_fini>:
 800060c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800060e:	bf00      	nop
 8000610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000612:	bc08      	pop	{r3}
 8000614:	469e      	mov	lr, r3
 8000616:	4770      	bx	lr
